<?php
// Complete MySQL Migration Test
echo "<h1>üîÑ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ä‡πâ MySQL</h1>";

require_once __DIR__ . '/db.php';

// 1. Test database connection
echo "<h2>1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h2>";
try {
    $db = dm_db();
    if ($db) {
        $info = dm_get_db_info();
        echo "‚úÖ <strong>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong><br>";
        echo "üìä <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong><br>";
        echo "<ul style='margin-left: 20px;'>";
        echo "<li>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: <strong>" . ($info['type'] ?? 'unknown') . "</strong></li>";
        echo "<li>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <strong>" . ($info['status'] ?? 'unknown') . "</strong></li>";
        if (isset($info['version'])) echo "<li>‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: <strong>" . $info['version'] . "</strong></li>";
        if (isset($info['database'])) echo "<li>‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: <strong>" . $info['database'] . "</strong></li>";
        echo "</ul>";
    } else {
        echo "‚ùå <strong style='color: red;'>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ</strong><br>";
        exit;
    }
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</strong> " . $e->getMessage() . "<br>";
    exit;
}

echo "<hr>";

// 2. Test table existence and creation
echo "<h2>2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á dm_settings</h2>";
try {
    $driver = $db->getAttribute(PDO::ATTR_DRIVER_NAME);
    
    // Check if table exists
    if ($driver === 'mysql') {
        $stmt = $db->query("SHOW TABLES LIKE 'dm_settings'");
        $tableExists = $stmt->rowCount() > 0;
    } elseif ($driver === 'sqlsrv') {
        $stmt = $db->query("SELECT COUNT(*) as count FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'dm_settings'");
        $result = $stmt->fetch();
        $tableExists = $result['count'] > 0;
    } else { // sqlite
        $stmt = $db->query("SELECT name FROM sqlite_master WHERE type='table' AND name='dm_settings'");
        $tableExists = $stmt->rowCount() > 0;
    }
    
    if ($tableExists) {
        echo "‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á dm_settings ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß<br>";
        
        // Count records
        $stmt = $db->query("SELECT COUNT(*) as count FROM dm_settings");
        $count = $stmt->fetch()['count'];
        echo "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô records ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: <strong>$count</strong><br>";
    } else {
        echo "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á dm_settings - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...<br>";
        
        // Create table based on driver
        if ($driver === 'mysql') {
            $createTableSQL = "CREATE TABLE IF NOT EXISTS `dm_settings` (
                `scope` VARCHAR(50) NOT NULL,
                `name` VARCHAR(100) NOT NULL,
                `value` TEXT NULL,
                `updated_at` BIGINT NULL,
                PRIMARY KEY (`scope`, `name`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
        } elseif ($driver === 'sqlsrv') {
            $createTableSQL = "CREATE TABLE dm_settings (
                scope NVARCHAR(50) NOT NULL,
                name NVARCHAR(100) NOT NULL,
                value NTEXT NULL,
                updated_at BIGINT NULL,
                PRIMARY KEY (scope, name)
            )";
        } else { // sqlite
            $createTableSQL = "CREATE TABLE IF NOT EXISTS dm_settings (
                scope TEXT NOT NULL,
                name TEXT NOT NULL,
                value TEXT,
                updated_at INTEGER,
                PRIMARY KEY (scope, name)
            )";
        }
        
        $db->exec($createTableSQL);
        echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á dm_settings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!<br>";
        
        // Insert initial data
        $platforms = [
            ['shopee', 'enabled', 'false'],
            ['lazada', 'enabled', 'false'],
            ['tiktok', 'enabled', 'false']
        ];
        
        $stmt = $db->prepare("INSERT INTO dm_settings (scope, name, value, updated_at) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE value=VALUES(value), updated_at=VALUES(updated_at)");
        foreach ($platforms as $platform) {
            $stmt->execute([$platform[0], $platform[1], $platform[2], time()]);
        }
        echo "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à<br>";
    }
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á:</strong> " . $e->getMessage() . "<br>";
}

echo "<hr>";

// 3. Test dm_settings functions
echo "<h2>3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô dm_settings</h2>";

$test_scope = 'mysql_migration_test';
$test_key = 'test_timestamp';
$test_value = date('Y-m-d H:i:s') . ' - MySQL Migration Test';

echo "<h3>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
try {
    $result = dm_settings_set($test_scope, $test_key, $test_value);
    if ($result) {
        echo "‚úÖ <strong>dm_settings_set() ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br>";
        echo "üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: <code>$test_scope.$test_key = $test_value</code><br>";
    } else {
        echo "‚ùå <strong style='color: red;'>dm_settings_set() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</strong><br>";
    }
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>dm_settings_set() error:</strong> " . $e->getMessage() . "<br>";
}

echo "<h3>üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>";
try {
    $retrieved_value = dm_settings_get($test_scope, $test_key);
    if ($retrieved_value === $test_value) {
        echo "‚úÖ <strong>dm_settings_get() ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br>";
        echo "üìñ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤: <code>$retrieved_value</code><br>";
        echo "üîÑ <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!</strong><br>";
    } else {
        echo "‚ö†Ô∏è <strong style='color: orange;'>dm_settings_get() ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô</strong><br>";
        echo "üìù ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: <code>$test_value</code><br>";
        echo "üìñ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: <code>$retrieved_value</code><br>";
    }
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>dm_settings_get() error:</strong> " . $e->getMessage() . "<br>";
}

echo "<h3>üìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h3>";
try {
    $all_settings = dm_settings_get_all($test_scope);
    if (is_array($all_settings) && count($all_settings) > 0) {
        echo "‚úÖ <strong>dm_settings_get_all() ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br>";
        echo "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô settings ‡πÉ‡∏ô scope '$test_scope': <strong>" . count($all_settings) . "</strong><br>";
        
        echo "<table border='1' style='border-collapse: collapse; margin: 10px 0;'>";
        echo "<tr><th>Key</th><th>Value</th></tr>";
        foreach ($all_settings as $key => $value) {
            echo "<tr><td>$key</td><td>" . htmlspecialchars(substr($value, 0, 50)) . "</td></tr>";
        }
        echo "</table>";
    } else {
        echo "‚ö†Ô∏è <strong style='color: orange;'>dm_settings_get_all() ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á</strong><br>";
    }
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>dm_settings_get_all() error:</strong> " . $e->getMessage() . "<br>";
}

echo "<hr>";

// 4. Test API functions
echo "<h2>4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API functions</h2>";

// Test save_settings API
echo "<h3>üíæ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö save_settings API</h3>";
$api_test_data = [
    'partner_id' => '123456789',
    'partner_key' => 'test_key_' . time(),
    'shop_id' => '987654321',
    'access_token' => 'test_token_' . time(),
    'enabled' => true
];

try {
    // Simulate POST data
    $json_data = json_encode($api_test_data);
    file_put_contents('php://temp', $json_data);
    
    // Mock the API request
    $_GET['action'] = 'save_settings';
    $_GET['platform'] = 'api_test';
    
    echo "üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API test:<br>";
    echo "<pre>" . json_encode($api_test_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre>";
    
    // Test the save logic directly
    $platform = 'api_test';
    $data = $api_test_data;
    
    if (isset($data['enabled'])) {
        $data['enabled'] = $data['enabled'] ? 'true' : 'false';
    }
    
    $saved_count = 0;
    foreach($data as $key => $value) {
        $final_value = is_bool($value) ? ($value ? 'true' : 'false') : $value;
        $result = dm_settings_set($platform, $key, $final_value);
        if ($result) $saved_count++;
    }
    
    echo "‚úÖ <strong>API save test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br>";
    echo "üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ <strong>$saved_count</strong> settings<br>";
    
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>API save test error:</strong> " . $e->getMessage() . "<br>";
}

// Test get_settings API
echo "<h3>üì• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö get_settings API</h3>";
try {
    $api_settings = dm_settings_get_all('api_test');
    
    echo "‚úÖ <strong>API get test ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</strong><br>";
    echo "üìä ‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ <strong>" . count($api_settings) . "</strong> settings<br>";
    
    if (count($api_settings) > 0) {
        echo "<table border='1' style='border-collapse: collapse; margin: 10px 0;'>";
        echo "<tr><th>Key</th><th>Value</th><th>Match</th></tr>";
        
        foreach ($api_test_data as $original_key => $original_value) {
            $expected = is_bool($original_value) ? ($original_value ? 'true' : 'false') : $original_value;
            $actual = $api_settings[$original_key] ?? 'NOT_FOUND';
            $match = ($actual === $expected) ? '‚úÖ' : '‚ùå';
            
            echo "<tr>";
            echo "<td>$original_key</td>";
            echo "<td>" . htmlspecialchars($actual) . "</td>";
            echo "<td>$match</td>";
            echo "</tr>";
        }
        echo "</table>";
    }
    
} catch (Exception $e) {
    echo "‚ùå <strong style='color: red;'>API get test error:</strong> " . $e->getMessage() . "<br>";
}

echo "<hr>";

// 5. Environment recommendations
echo "<h2>5Ô∏è‚É£ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cPanel</h2>";

echo "<div style='background: #f0f8ff; padding: 15px; border: 1px solid #0066cc; border-radius: 8px;'>";
echo "<h3>üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô cPanel</h3>";
echo "<ol>";
echo "<li><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL:</strong> ‡πÉ‡∏ô cPanel > MySQL Databases</li>";
echo "<li><strong>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables:</strong> ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .htaccess ‡∏´‡∏£‡∏∑‡∏≠ config.php</li>";
echo "<li><strong>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå:</strong> ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ cPanel</li>";
echo "<li><strong>‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå test_mysql_connection.php</li>";
echo "<li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö settings:</strong> ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ settings.php ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'</li>";
echo "</ol>";

echo "<h4>‚öôÔ∏è Environment Variables ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>";
echo "<pre style='background: #f9f9f9; padding: 10px; border: 1px solid #ccc;'>";
echo "# ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .htaccess (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cPanel)\n";
echo "SetEnv DM_DB_DSN \"mysql:host=localhost;dbname=yourdb_name;charset=utf8mb4\"\n";
echo "SetEnv DM_DB_USER \"yourdb_user\"\n";
echo "SetEnv DM_DB_PASS \"yourdb_password\"\n\n";

echo "# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config.php\n";
echo "\$config['db_dsn'] = 'mysql:host=localhost;dbname=yourdb_name;charset=utf8mb4';\n";
echo "\$config['db_user'] = 'yourdb_user';\n";
echo "\$config['db_pass'] = 'yourdb_password';\n";
echo "</pre>";
echo "</div>";

echo "<hr>";

// 6. Final summary
echo "<h2>6Ô∏è‚É£ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>";

$current_time = date('Y-m-d H:i:s');
$db_type = dm_get_db_type();

echo "<div style='background: #e6ffe6; padding: 15px; border: 1px solid #00cc00; border-radius: 8px;'>";
echo "<h3>‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢ MySQL</h3>";
echo "<p><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</strong> $current_time</p>";
echo "<p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> " . strtoupper($db_type) . "</p>";
echo "<p><strong>‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:</strong> ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</p>";
echo "<p><strong>‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô dm_settings:</strong> ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</p>";
echo "<p><strong>API functions:</strong> ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</p>";
echo "<p><strong>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</strong> ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ cPanel</p>";
echo "</div>";

echo "<div style='margin: 20px 0;'>";
echo "<h3>üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ</h3>";
echo "<ol>";
echo "<li>‡∏™‡∏£‡πâ‡∏≤‡∏á MySQL database ‡πÉ‡∏ô cPanel</li>";
echo "<li>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï environment variables</li>";
echo "<li>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ cPanel</li>";
echo "<li>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå test_mysql_connection.php ‡∏ö‡∏ô cPanel</li>";
echo "<li>‡∏ó‡∏î‡∏™‡∏≠‡∏ö settings.php ‡∏ö‡∏ô cPanel</li>";
echo "</ol>";
echo "</div>";

// Cleanup test data
try {
    $stmt = $db->prepare("DELETE FROM dm_settings WHERE scope IN (?, ?)");
    $stmt->execute([$test_scope, 'api_test']);
    echo "<p style='color: #666; font-size: 0.9em;'>üßπ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>";
} catch (Exception $e) {
    echo "<p style='color: #666; font-size: 0.9em;'>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: " . $e->getMessage() . "</p>";
}
?>
